(function () {

    'use strict';

    angular.module('projectCmdo', ['projectCmdo.components', 'projectCmdo.utils']);

    angular.module('projectCmdo.components', []);
    angular.module('projectCmdo.utils', []);
})();
(function () {

    'use strict';

    angular.module('projectCmdo').controller('ProjectCmdoController', ProjectCmdoController);

    ProjectCmdoController.$inject = ['_'];

    function ProjectCmdoController(_) {
        console.log('ProjectCmdoController', _);
        var cmdo = this;

        _.extend(cmdo, {
            name: 'Project Commando'
        });
    }
})();
(function () {

    'use strict';

    angular.module('projectCmdo.utils').factory('_', lodashFactory);

    lodashFactory.$inject = ['$window'];

    function lodashFactory($window) {
        var _ = $window._;

        delete $window._; // remove second Lodash library

        return _;
    }
})();
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {

    'use strict';

    angular.module('projectCmdo').service('tileService', tileService);

    tileService.$inject = ['_'];

    function tileService(_) {

        this.createTile = function (options) {
            return new TileVM(options);
        };

        var TileVM = function () {
            function TileVM(tile) {
                _classCallCheck(this, TileVM);

                this._tile = {};

                for (var prop in tile) {
                    if (!tile.hasOwnProperty(prop)) {
                        continue;
                    }
                    this[prop] = tile[prop];
                }
            }

            _createClass(TileVM, [{
                key: 'elevation',
                get: function get() {
                    return this._tile.elevation || 0;
                },
                set: function set(elevation) {
                    this._tile.elevation = elevation;
                }
            }, {
                key: 'x',
                get: function get() {
                    return this._tile.x || 0;
                },
                set: function set(x) {
                    this._tile.x = x;
                }
            }, {
                key: 'y',
                get: function get() {
                    return this._tile.y || 0;
                },
                set: function set(y) {
                    this._tile.y = y;
                }
            }]);

            return TileVM;
        }();
    }
})();
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {

    'use strict';

    angular.module('projectCmdo').factory('tilesFactory', tilesFactory);

    tilesFactory.$inject = ['$rootScope', '_', 'tileService'];

    function tilesFactory($rootScope, _, tileService) {
        var TilesFactory = function () {
            function TilesFactory(tiles) {
                _classCallCheck(this, TilesFactory);

                this._tiles = {};

                for (var prop in tiles) {
                    if (!tiles.hasOwnProperty(prop)) {
                        continue;
                    }
                    this[prop] = tiles[prop];
                }
            }

            _createClass(TilesFactory, [{
                key: 'renderTiles',
                value: function renderTiles(grid) {
                    this.grid = grid;

                    if (this.count <= 0) {
                        console.error('Invalid map definition:', this.grid);
                        return;
                    }

                    var BEACH = this.grid.x - 2;
                    var JUNGLE = this.grid.x - 3;
                    var OCEAN = this.grid.x - 1;
                    var MIN = 2;
                    var MAX = 5;
                    var elevation = MIN;
                    var peaks = 0;
                    var rows = [];

                    for (var rowIndex = 0; rowIndex < this.grid.y; rowIndex++) {

                        rows[rowIndex] = [];

                        for (var cellIndex = 0; cellIndex < this.grid.x; cellIndex++) {
                            var tile = tileService.createTile({
                                elevation: _getElevation(cellIndex, rowIndex),
                                x: cellIndex,
                                y: rowIndex
                            });

                            rows[rowIndex].push(tile);
                        }

                        /**
                         * Reset elevation to row's first cell's elevation
                         * so that next row uses its Northern sibling's elevation
                         * to start the calculations for its cells
                         */
                        elevation = rows[rowIndex][0].elevation;
                    }

                    this.rows = rows;

                    function _getElevation(cell, row) {
                        /**
                         * random cell can be Peak(4)
                         * cell 7 is Beach(1)
                         * cell 8 is Ocean(0)
                         */

                        if (cell > JUNGLE) {
                            return cell === BEACH ? 1 : 0;
                        }

                        var deltas = [0];

                        if (row > 0 && cell > 0) {
                            elevation = Math.floor((rows[row - 1][cell].elevation + rows[row][cell - 1].elevation) / 2);
                        }

                        if (elevation > MIN) {
                            deltas.push(-1);
                        }
                        if (elevation < MAX && peaks < 2) {
                            deltas.push(1);
                        }
                        if (elevation < MAX - 2 && peaks < 2) {
                            deltas.push(2);
                            deltas.pop(); // pull off the 0 delta for a greater chance to hit the 2 delta
                        }

                        elevation = elevation + _.sample(deltas);
                        peaks = elevation === MAX ? peaks++ : peaks;

                        return elevation;
                    }
                }
            }, {
                key: 'count',
                get: function get() {
                    return this.grid.x * this.grid.y;
                }
            }, {
                key: 'grid',
                get: function get() {
                    return this._tiles.grid || {
                        x: 0,
                        y: 0
                    };
                },
                set: function set(grid) {
                    this._tiles.grid = {
                        x: grid && grid.x ? parseInt(grid.x) : 0,
                        y: grid && grid.y ? parseInt(grid.y) : 0
                    };
                }
            }, {
                key: 'rows',
                get: function get() {
                    return this._tiles.rows || [];
                },
                set: function set(rows) {
                    this._tiles.rows = rows;
                }
            }, {
                key: 'tiles',
                get: function get() {
                    return this._tiles.tiles || [];
                },
                set: function set(tiles) {
                    this._tiles.tiles = tiles;
                }
            }]);

            return TilesFactory;
        }();

        return new TilesFactory();
    }
})();
(function () {

    'use strict';

    angular.module('projectCmdo.components').directive('map', mapDirective);

    function mapDirective() {
        var directive = {
            restrict: 'A',
            replace: true,
            templateUrl: 'templates/components/map/map.tmpl.html',
            controller: MapController,
            controllerAs: 'map'
        };

        return directive;
    }

    MapController.$inject = ['$element', '$timeout', '_', 'tilesFactory'];

    function MapController($element, $timeout, _, tilesFactory) {

        console.log('MapController');
        var map = this;

        _.extend(map, {
            onChangeDimension: onChangeDimension,
            onClickSubmit: onClickSubmit,
            onFocusDimension: onFocusDimension,

            cols: 16,
            name: 'TILES',
            rows: 16,
            tiles: tilesFactory
        });

        init();

        function init() {
            map.tiles.renderTiles({
                x: map.cols,
                y: map.rows
            });

            $timeout(setMap);
        }

        function onChangeDimension() {
            if (map.cols > 16) {
                console.warn(map.cols + ' Columns? Did you mean "16"?');
                map.cols = 16;
            }
            if (map.rows > 16) {
                console.warn(map.rows + ' Rows? Did you mean "16"?');
                map.rows = 16;
            }
        }

        function onClickSubmit() {
            map.cols = map.cols > 16 ? 16 : map.cols;
            map.rows = map.rows > 16 ? 16 : map.rows;

            $element.addClass('map--hidden');

            init();
        }

        function onFocusDimension(id) {
            $element.find('#' + id).select();
        }

        function setHeights() {
            var $cells = $element.find('.map-row__cell');
            var height = 0;

            $cells.each(_setHeight);

            function _setHeight(index, cell) {
                if (!height) {
                    height = $(cell).outerWidth();
                }
                $(cell).outerHeight(height);
            }
        }

        function setMap() {
            setHeights();
            $element.removeClass('map--hidden');
        }
    }
})();